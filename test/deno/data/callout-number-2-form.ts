import type {
  CalloutComponentInputType,
  InputCalloutComponentSchema,
} from "../../../mod.ts";

export const calloutNumber2Form: InputCalloutComponentSchema = {
  "id": "ezq1fjv",
  "key": "number1",
  "mask": false,
  "tags": [],
  "type": <CalloutComponentInputType> "number",
  "input": true,
  "label": "Number with settings",
  "logic": [],
  "addons": [],
  "errors": "",
  "hidden": false,
  "prefix": "",
  "suffix": "",
  "unique": false,
  "widget": {
    "type": "input",
  },
  "dbIndex": false,
  "overlay": {
    "top": "",
    "left": "",
    "page": "",
    "style": "",
    "width": "",
    "height": "",
  },
  "tooltip": "",
  "disabled": false,
  "multiple": false,
  "redrawOn": "",
  "tabindex": "",
  "validate": {
    "max": "",
    "min": "",
    "json": "",
    "step": "any",
    "custom": "",
    "unique": false,
    "integer": "",
    "multiple": false,
    "required": false,
    "customMessage": "",
    "customPrivate": false,
    "strictDateValidation": false,
  },
  "adminOnly": false,
  "autofocus": false,
  "delimiter": true,
  "encrypted": false,
  "hideLabel": false,
  "modalEdit": false,
  "protected": false,
  "refreshOn": "",
  "tableView": false,
  "attributes": {},
  "errorLabel": "",
  "persistent": true,
  "properties": {},
  "validateOn": "change",
  "applyMaskOn": "change",
  "clearOnHide": true,
  "conditional": {
    "eq": "",
    "json": "",
    "show": null,
    "when": null,
  },
  "customClass": "",
  "description":
    "Here we are testing the input of a number with various settings.",
  "displayMask": "",
  "inputFormat": "plain",
  "placeholder": "Number inputs can also have placeholders.",
  "autocomplete": "",
  "decimalLimit": 2,
  "defaultValue": 10,
  "dataGridLabel": false,
  "labelPosition": "top",
  "showCharCount": false,
  "showWordCount": false,
  "calculateValue": "",
  "requireDecimal": true,
  "calculateServer": false,
  "customConditional": "",
  "allowMultipleMasks": false,
  "customDefaultValue": "",
  "allowCalculateOverride": false,
  "truncateMultipleSpaces": true,
};
